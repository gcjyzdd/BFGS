//
// Author: Changjie Guan (changjieguan@gmail.com)
//
//
//BSD 2-Clause License
//
//Copyright (c) 2018, Changjie
//All rights reserved.
//
//Redistribution and use in source and binary forms, with or without
//modification, are permitted provided that the following conditions are met:
//
//* Redistributions of source code must retain the above copyright notice, this
//  list of conditions and the following disclaimer.
//
//* Redistributions in binary form must reproduce the above copyright notice,
//  this list of conditions and the following disclaimer in the documentation
//  and/or other materials provided with the distribution.
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
//FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
//SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
//CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
//OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
#include <iostream>
#include <chrono>
#include <vector>
#include <functional>
#include <math.h>

#include "phr.hpp"
#include "bfgs.hpp"

using namespace std;

namespace SISS {

	const double pi = atan(1) * 4;

	struct LDM : public ConstraintObj
	{
		struct Settings
		{
			// system settings
			double dt;
			size_t N;
			size_t m, n;

			// car parameters
			double Lf, Lr, Caf, Car, Mass, I;

			// weights
			double w_cte, w_v, w_s, w_a, w_sd, w_ad, w_epsi;

			// boundaries
			double steer_max, steer_min, a_max, a_min;
		};

		struct Args
		{
			double ref_v, dt;
			double x, y, vx, vy, psi, r;
			vector<double> coeffs;

		};

		Settings settings;
		Args args;

		// constructor
		LDM()
		{
			settings.dt = 1.0 / 20;
			settings.N = 10;
			settings.m = 2;
			settings.n = 6;
			m_l = settings.n * settings.N;
			m_m = 4 * (settings.N - 1);
			m_n = settings.n*settings.N + settings.m*(settings.N - 1);

			settings.Lf = 1.17;
			settings.Lr = 1.77;
			settings.Mass = 1820.0;
			settings.I = 3746.0;
			settings.Caf = 72653.0;
			settings.Car = 121449.0;

			// Input boundaries
			settings.steer_max = 25 * pi / 180;
			settings.steer_min = -25 * pi / 180;
			settings.a_max = 3.75;
			settings.a_min = -10.0;

			// MPC weights
			settings.w_cte = 300.0;
			settings.w_s = 1;
			settings.w_sd = 1;
			settings.w_a = 1;
			settings.w_ad = 10;
			settings.w_v = 1;
			settings.w_epsi = 20;

			// Initial state
			args.ref_v = 40 / 3.6;
			args.coeffs = { -1, 0, 0.001, 0 };

			args.x = -1;
			args.y = 1;
			args.vx = 10;
			args.vy = 0;
			args.psi = 0;
			args.r = 0;

			m_x.resize(settings.n*settings.N + settings.m*(settings.N - 1));
			m_x.fill(0.);
		}

		double cost(VectorXd const &x)
		{
			double p0 = args.coeffs[0];
			double p1 = args.coeffs[1];
			double p2 = args.coeffs[2];
			double p3 = args.coeffs[3];

			double ref_v = args.ref_v;

			double w_cte = settings.w_cte;
			double w_v = settings.w_v;
			double w_s = settings.w_s;
			double w_a = settings.w_a;
			double w_sd = settings.w_sd;
			double w_ad = settings.w_ad;
			double w_ep = settings.w_epsi;

			double c = w_a * pow(x[69], 2) + w_a * pow(x[70], 2) + w_a * pow(x[71], 2) + w_a * pow(x[72], 2) + w_a * pow(x[73], 2) + w_a * pow(x[74], 2) + w_a * pow(x[75], 2) + w_a * pow(x[76], 2) + w_a * pow(x[77], 2) + w_ad * pow(-x[69] + x[70], 2) + w_ad * pow(-x[70] + x[71], 2) + w_ad * pow(-x[71] + x[72], 2) + w_ad * pow(-x[72] + x[73], 2) + w_ad * pow(-x[73] + x[74], 2) + w_ad * pow(-x[74] + x[75], 2) + w_ad * pow(-x[75] + x[76], 2) + w_ad * pow(-x[76] + x[77], 2) + w_cte * pow(p0 + p1 * x[0] + p2 * pow(x[0], 2) + p3 * pow(x[0], 3) - x[10], 2) + w_cte * pow(p0 + p1 * x[1] + p2 * pow(x[1], 2) + p3 * pow(x[1], 3) - x[11], 2) + w_cte * pow(p0 + p1 * x[2] + p2 * pow(x[2], 2) + p3 * pow(x[2], 3) - x[12], 2) + w_cte * pow(p0 + p1 * x[3] + p2 * pow(x[3], 2) + p3 * pow(x[3], 3) - x[13], 2) + w_cte * pow(p0 + p1 * x[4] + p2 * pow(x[4], 2) + p3 * pow(x[4], 3) - x[14], 2) + w_cte * pow(p0 + p1 * x[5] + p2 * pow(x[5], 2) + p3 * pow(x[5], 3) - x[15], 2) + w_cte * pow(p0 + p1 * x[6] + p2 * pow(x[6], 2) + p3 * pow(x[6], 3) - x[16], 2) + w_cte * pow(p0 + p1 * x[7] + p2 * pow(x[7], 2) + p3 * pow(x[7], 3) - x[17], 2) + w_cte * pow(p0 + p1 * x[8] + p2 * pow(x[8], 2) + p3 * pow(x[8], 3) - x[18], 2) + w_cte * pow(p0 + p1 * x[9] + p2 * pow(x[9], 2) + p3 * pow(x[9], 3) - x[19], 2) + w_ep * pow(x[50] - atan(p1 + 2 * p2*x[0] + 3 * p3*x[0]), 2) + w_ep * pow(x[51] - atan(p1 + 2 * p2*x[1] + 3 * p3*x[1]), 2) + w_ep * pow(x[52] - atan(p1 + 2 * p2*x[2] + 3 * p3*x[2]), 2) + w_ep * pow(x[53] - atan(p1 + 2 * p2*x[3] + 3 * p3*x[3]), 2) + w_ep * pow(x[54] - atan(p1 + 2 * p2*x[4] + 3 * p3*x[4]), 2) + w_ep * pow(x[55] - atan(p1 + 2 * p2*x[5] + 3 * p3*x[5]), 2) + w_ep * pow(x[56] - atan(p1 + 2 * p2*x[6] + 3 * p3*x[6]), 2) + w_ep * pow(x[57] - atan(p1 + 2 * p2*x[7] + 3 * p3*x[7]), 2) + w_ep * pow(x[58] - atan(p1 + 2 * p2*x[8] + 3 * p3*x[8]), 2) + w_ep * pow(x[59] - atan(p1 + 2 * p2*x[9] + 3 * p3*x[9]), 2) + w_s * pow(x[60], 2) + w_s * pow(x[61], 2) + w_s * pow(x[62], 2) + w_s * pow(x[63], 2) + w_s * pow(x[64], 2) + w_s * pow(x[65], 2) + w_s * pow(x[66], 2) + w_s * pow(x[67], 2) + w_s * pow(x[68], 2) + w_sd * pow(-x[60] + x[61], 2) + w_sd * pow(-x[61] + x[62], 2) + w_sd * pow(-x[62] + x[63], 2) + w_sd * pow(-x[63] + x[64], 2) + w_sd * pow(-x[64] + x[65], 2) + w_sd * pow(-x[65] + x[66], 2) + w_sd * pow(-x[66] + x[67], 2) + w_sd * pow(-x[67] + x[68], 2) + w_v * pow(ref_v - x[20], 2) + w_v * pow(ref_v - x[21], 2) + w_v * pow(ref_v - x[22], 2) + w_v * pow(ref_v - x[23], 2) + w_v * pow(ref_v - x[24], 2) + w_v * pow(ref_v - x[25], 2) + w_v * pow(ref_v - x[26], 2) + w_v * pow(ref_v - x[27], 2) + w_v * pow(ref_v - x[28], 2) + w_v * pow(ref_v - x[29], 2);

			return c;
		}

		void grad(VectorXd &diff, VectorXd &x)
		{
			diff.resize(x.size());
			double p0 = args.coeffs[0];
			double p1 = args.coeffs[1];
			double p2 = args.coeffs[2];
			double p3 = args.coeffs[3];

			double ref_v = args.ref_v;

			double w_cte = settings.w_cte;
			double w_v = settings.w_v;
			double w_s = settings.w_s;
			double w_a = settings.w_a;
			double w_sd = settings.w_sd;
			double w_ad = settings.w_ad;
			double w_ep = settings.w_epsi;

			diff << w_cte * (2 * p1 + 4 * p2*x[0] + 6 * p3*pow(x[0], 2))*(p0 + p1 * x[0] + p2 * pow(x[0], 2) + p3 * pow(x[0], 3) - x[10]) - 2 * w_ep*(2 * p2 + 3 * p3)*(x[50] - atan(p1 + 2 * p2*x[0] + 3 * p3*x[0])) / (pow(p1 + 2 * p2*x[0] + 3 * p3*x[0], 2) + 1), w_cte*(2 * p1 + 4 * p2*x[1] + 6 * p3*pow(x[1], 2))*(p0 + p1 * x[1] + p2 * pow(x[1], 2) + p3 * pow(x[1], 3) - x[11]) - 2 * w_ep*(2 * p2 + 3 * p3)*(x[51] - atan(p1 + 2 * p2*x[1] + 3 * p3*x[1])) / (pow(p1 + 2 * p2*x[1] + 3 * p3*x[1], 2) + 1), w_cte*(2 * p1 + 4 * p2*x[2] + 6 * p3*pow(x[2], 2))*(p0 + p1 * x[2] + p2 * pow(x[2], 2) + p3 * pow(x[2], 3) - x[12]) - 2 * w_ep*(2 * p2 + 3 * p3)*(x[52] - atan(p1 + 2 * p2*x[2] + 3 * p3*x[2])) / (pow(p1 + 2 * p2*x[2] + 3 * p3*x[2], 2) + 1), w_cte*(2 * p1 + 4 * p2*x[3] + 6 * p3*pow(x[3], 2))*(p0 + p1 * x[3] + p2 * pow(x[3], 2) + p3 * pow(x[3], 3) - x[13]) - 2 * w_ep*(2 * p2 + 3 * p3)*(x[53] - atan(p1 + 2 * p2*x[3] + 3 * p3*x[3])) / (pow(p1 + 2 * p2*x[3] + 3 * p3*x[3], 2) + 1), w_cte*(2 * p1 + 4 * p2*x[4] + 6 * p3*pow(x[4], 2))*(p0 + p1 * x[4] + p2 * pow(x[4], 2) + p3 * pow(x[4], 3) - x[14]) - 2 * w_ep*(2 * p2 + 3 * p3)*(x[54] - atan(p1 + 2 * p2*x[4] + 3 * p3*x[4])) / (pow(p1 + 2 * p2*x[4] + 3 * p3*x[4], 2) + 1), w_cte*(2 * p1 + 4 * p2*x[5] + 6 * p3*pow(x[5], 2))*(p0 + p1 * x[5] + p2 * pow(x[5], 2) + p3 * pow(x[5], 3) - x[15]) - 2 * w_ep*(2 * p2 + 3 * p3)*(x[55] - atan(p1 + 2 * p2*x[5] + 3 * p3*x[5])) / (pow(p1 + 2 * p2*x[5] + 3 * p3*x[5], 2) + 1), w_cte*(2 * p1 + 4 * p2*x[6] + 6 * p3*pow(x[6], 2))*(p0 + p1 * x[6] + p2 * pow(x[6], 2) + p3 * pow(x[6], 3) - x[16]) - 2 * w_ep*(2 * p2 + 3 * p3)*(x[56] - atan(p1 + 2 * p2*x[6] + 3 * p3*x[6])) / (pow(p1 + 2 * p2*x[6] + 3 * p3*x[6], 2) + 1), w_cte*(2 * p1 + 4 * p2*x[7] + 6 * p3*pow(x[7], 2))*(p0 + p1 * x[7] + p2 * pow(x[7], 2) + p3 * pow(x[7], 3) - x[17]) - 2 * w_ep*(2 * p2 + 3 * p3)*(x[57] - atan(p1 + 2 * p2*x[7] + 3 * p3*x[7])) / (pow(p1 + 2 * p2*x[7] + 3 * p3*x[7], 2) + 1), w_cte*(2 * p1 + 4 * p2*x[8] + 6 * p3*pow(x[8], 2))*(p0 + p1 * x[8] + p2 * pow(x[8], 2) + p3 * pow(x[8], 3) - x[18]) - 2 * w_ep*(2 * p2 + 3 * p3)*(x[58] - atan(p1 + 2 * p2*x[8] + 3 * p3*x[8])) / (pow(p1 + 2 * p2*x[8] + 3 * p3*x[8], 2) + 1), w_cte*(2 * p1 + 4 * p2*x[9] + 6 * p3*pow(x[9], 2))*(p0 + p1 * x[9] + p2 * pow(x[9], 2) + p3 * pow(x[9], 3) - x[19]) - 2 * w_ep*(2 * p2 + 3 * p3)*(x[59] - atan(p1 + 2 * p2*x[9] + 3 * p3*x[9])) / (pow(p1 + 2 * p2*x[9] + 3 * p3*x[9], 2) + 1), w_cte*(-2 * p0 - 2 * p1*x[0] - 2 * p2*pow(x[0], 2) - 2 * p3*pow(x[0], 3) + 2 * x[10]), w_cte*(-2 * p0 - 2 * p1*x[1] - 2 * p2*pow(x[1], 2) - 2 * p3*pow(x[1], 3) + 2 * x[11]), w_cte*(-2 * p0 - 2 * p1*x[2] - 2 * p2*pow(x[2], 2) - 2 * p3*pow(x[2], 3) + 2 * x[12]), w_cte*(-2 * p0 - 2 * p1*x[3] - 2 * p2*pow(x[3], 2) - 2 * p3*pow(x[3], 3) + 2 * x[13]), w_cte*(-2 * p0 - 2 * p1*x[4] - 2 * p2*pow(x[4], 2) - 2 * p3*pow(x[4], 3) + 2 * x[14]), w_cte*(-2 * p0 - 2 * p1*x[5] - 2 * p2*pow(x[5], 2) - 2 * p3*pow(x[5], 3) + 2 * x[15]), w_cte*(-2 * p0 - 2 * p1*x[6] - 2 * p2*pow(x[6], 2) - 2 * p3*pow(x[6], 3) + 2 * x[16]), w_cte*(-2 * p0 - 2 * p1*x[7] - 2 * p2*pow(x[7], 2) - 2 * p3*pow(x[7], 3) + 2 * x[17]), w_cte*(-2 * p0 - 2 * p1*x[8] - 2 * p2*pow(x[8], 2) - 2 * p3*pow(x[8], 3) + 2 * x[18]), w_cte*(-2 * p0 - 2 * p1*x[9] - 2 * p2*pow(x[9], 2) - 2 * p3*pow(x[9], 3) + 2 * x[19]), w_v*(-2 * ref_v + 2 * x[20]), w_v*(-2 * ref_v + 2 * x[21]), w_v*(-2 * ref_v + 2 * x[22]), w_v*(-2 * ref_v + 2 * x[23]), w_v*(-2 * ref_v + 2 * x[24]), w_v*(-2 * ref_v + 2 * x[25]), w_v*(-2 * ref_v + 2 * x[26]), w_v*(-2 * ref_v + 2 * x[27]), w_v*(-2 * ref_v + 2 * x[28]), w_v*(-2 * ref_v + 2 * x[29]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, w_ep*(2 * x[50] - 2 * atan(p1 + 2 * p2*x[0] + 3 * p3*x[0])), w_ep*(2 * x[51] - 2 * atan(p1 + 2 * p2*x[1] + 3 * p3*x[1])), w_ep*(2 * x[52] - 2 * atan(p1 + 2 * p2*x[2] + 3 * p3*x[2])), w_ep*(2 * x[53] - 2 * atan(p1 + 2 * p2*x[3] + 3 * p3*x[3])), w_ep*(2 * x[54] - 2 * atan(p1 + 2 * p2*x[4] + 3 * p3*x[4])), w_ep*(2 * x[55] - 2 * atan(p1 + 2 * p2*x[5] + 3 * p3*x[5])), w_ep*(2 * x[56] - 2 * atan(p1 + 2 * p2*x[6] + 3 * p3*x[6])), w_ep*(2 * x[57] - 2 * atan(p1 + 2 * p2*x[7] + 3 * p3*x[7])), w_ep*(2 * x[58] - 2 * atan(p1 + 2 * p2*x[8] + 3 * p3*x[8])), w_ep*(2 * x[59] - 2 * atan(p1 + 2 * p2*x[9] + 3 * p3*x[9])), 2 * w_s*x[60] + w_sd * (2 * x[60] - 2 * x[61]), 2 * w_s*x[61] + w_sd * (-2 * x[60] + 2 * x[61]) + w_sd * (2 * x[61] - 2 * x[62]), 2 * w_s*x[62] + w_sd * (-2 * x[61] + 2 * x[62]) + w_sd * (2 * x[62] - 2 * x[63]), 2 * w_s*x[63] + w_sd * (-2 * x[62] + 2 * x[63]) + w_sd * (2 * x[63] - 2 * x[64]), 2 * w_s*x[64] + w_sd * (-2 * x[63] + 2 * x[64]) + w_sd * (2 * x[64] - 2 * x[65]), 2 * w_s*x[65] + w_sd * (-2 * x[64] + 2 * x[65]) + w_sd * (2 * x[65] - 2 * x[66]), 2 * w_s*x[66] + w_sd * (-2 * x[65] + 2 * x[66]) + w_sd * (2 * x[66] - 2 * x[67]), 2 * w_s*x[67] + w_sd * (-2 * x[66] + 2 * x[67]) + w_sd * (2 * x[67] - 2 * x[68]), 2 * w_s*x[68] + w_sd * (-2 * x[67] + 2 * x[68]), 2 * w_a*x[69] + w_ad * (2 * x[69] - 2 * x[70]), 2 * w_a*x[70] + w_ad * (-2 * x[69] + 2 * x[70]) + w_ad * (2 * x[70] - 2 * x[71]), 2 * w_a*x[71] + w_ad * (-2 * x[70] + 2 * x[71]) + w_ad * (2 * x[71] - 2 * x[72]), 2 * w_a*x[72] + w_ad * (-2 * x[71] + 2 * x[72]) + w_ad * (2 * x[72] - 2 * x[73]), 2 * w_a*x[73] + w_ad * (-2 * x[72] + 2 * x[73]) + w_ad * (2 * x[73] - 2 * x[74]), 2 * w_a*x[74] + w_ad * (-2 * x[73] + 2 * x[74]) + w_ad * (2 * x[74] - 2 * x[75]), 2 * w_a*x[75] + w_ad * (-2 * x[74] + 2 * x[75]) + w_ad * (2 * x[75] - 2 * x[76]), 2 * w_a*x[76] + w_ad * (-2 * x[75] + 2 * x[76]) + w_ad * (2 * x[76] - 2 * x[77]), 2 * w_a*x[77] + w_ad * (-2 * x[76] + 2 * x[77]);
		}

		void hf(VectorXd &value, VectorXd const &x)
		{
			value.resize(m_l); 

			double p0 = args.coeffs[0];
			double p1 = args.coeffs[1];
			double p2 = args.coeffs[2];
			double p3 = args.coeffs[3];

			double ref_v = args.ref_v;

			double w_cte = settings.w_cte;
			double w_v = settings.w_v;
			double w_s = settings.w_s;
			double w_a = settings.w_a;
			double w_sd = settings.w_sd;
			double w_ad = settings.w_ad;
			double w_ep = settings.w_epsi;

			double dt = settings.dt;
			double Lf = settings.Lf;
			double Lr = settings.Lr;
			double Caf = settings.Caf;
			double Car = settings.Car;
			double m = settings.Mass;
			double I = settings.I;

			double argx = args.x;
			double argy = args.y;
			double argvx = args.vx;
			double argvy = args.vy;
			double argr = args.r;
			double argp = args.psi;

			value << -argx + x[0], -dt * x[20] * cos(x[50]) + dt * x[30] * sin(x[50]) - x[0] + x[1], -dt * x[21] * cos(x[51]) + dt * x[31] * sin(x[51]) - x[1] + x[2], -dt * x[22] * cos(x[52]) + dt * x[32] * sin(x[52]) - x[2] + x[3], -dt * x[23] * cos(x[53]) + dt * x[33] * sin(x[53]) - x[3] + x[4], -dt * x[24] * cos(x[54]) + dt * x[34] * sin(x[54]) - x[4] + x[5], -dt * x[25] * cos(x[55]) + dt * x[35] * sin(x[55]) - x[5] + x[6], -dt * x[26] * cos(x[56]) + dt * x[36] * sin(x[56]) - x[6] + x[7], -dt * x[27] * cos(x[57]) + dt * x[37] * sin(x[57]) - x[7] + x[8], -dt * x[28] * cos(x[58]) + dt * x[38] * sin(x[58]) - x[8] + x[9], -argy + x[10], -dt * x[20] * sin(x[50]) - dt * x[30] * cos(x[50]) - x[10] + x[11], -dt * x[21] * sin(x[51]) - dt * x[31] * cos(x[51]) - x[11] + x[12], -dt * x[22] * sin(x[52]) - dt * x[32] * cos(x[52]) - x[12] + x[13], -dt * x[23] * sin(x[53]) - dt * x[33] * cos(x[53]) - x[13] + x[14], -dt * x[24] * sin(x[54]) - dt * x[34] * cos(x[54]) - x[14] + x[15], -dt * x[25] * sin(x[55]) - dt * x[35] * cos(x[55]) - x[15] + x[16], -dt * x[26] * sin(x[56]) - dt * x[36] * cos(x[56]) - x[16] + x[17], -dt * x[27] * sin(x[57]) - dt * x[37] * cos(x[57]) - x[17] + x[18], -dt * x[28] * sin(x[58]) - dt * x[38] * cos(x[58]) - x[18] + x[19], -argvx + x[20], -dt * x[69] - x[20] + x[21], -dt * x[70] - x[21] + x[22], -dt * x[71] - x[22] + x[23], -dt * x[72] - x[23] + x[24], -dt * x[73] - x[24] + x[25], -dt * x[74] - x[25] + x[26], -dt * x[75] - x[26] + x[27], -dt * x[76] - x[27] + x[28], -dt * x[77] - x[28] + x[29], -argvy + x[30], -dt * (2 * Caf*x[60] / m + x[40] * (-x[20] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[20])) + x[30] * (-2 * Caf - 2 * Car) / (m*x[20])) - x[30] + x[31], -dt * (2 * Caf*x[61] / m + x[41] * (-x[21] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[21])) + x[31] * (-2 * Caf - 2 * Car) / (m*x[21])) - x[31] + x[32], -dt * (2 * Caf*x[62] / m + x[42] * (-x[22] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[22])) + x[32] * (-2 * Caf - 2 * Car) / (m*x[22])) - x[32] + x[33], -dt * (2 * Caf*x[63] / m + x[43] * (-x[23] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[23])) + x[33] * (-2 * Caf - 2 * Car) / (m*x[23])) - x[33] + x[34], -dt * (2 * Caf*x[64] / m + x[44] * (-x[24] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[24])) + x[34] * (-2 * Caf - 2 * Car) / (m*x[24])) - x[34] + x[35], -dt * (2 * Caf*x[65] / m + x[45] * (-x[25] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[25])) + x[35] * (-2 * Caf - 2 * Car) / (m*x[25])) - x[35] + x[36], -dt * (2 * Caf*x[66] / m + x[46] * (-x[26] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[26])) + x[36] * (-2 * Caf - 2 * Car) / (m*x[26])) - x[36] + x[37], -dt * (2 * Caf*x[67] / m + x[47] * (-x[27] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[27])) + x[37] * (-2 * Caf - 2 * Car) / (m*x[27])) - x[37] + x[38], -dt * (2 * Caf*x[68] / m + x[48] * (-x[28] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[28])) + x[38] * (-2 * Caf - 2 * Car) / (m*x[28])) - x[38] + x[39], -argr + x[40], -dt * (2 * Caf*Lf*x[60] / I + x[30] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[20]) + x[40] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[20])) - x[40] + x[41], -dt * (2 * Caf*Lf*x[61] / I + x[31] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[21]) + x[41] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[21])) - x[41] + x[42], -dt * (2 * Caf*Lf*x[62] / I + x[32] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[22]) + x[42] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[22])) - x[42] + x[43], -dt * (2 * Caf*Lf*x[63] / I + x[33] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[23]) + x[43] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[23])) - x[43] + x[44], -dt * (2 * Caf*Lf*x[64] / I + x[34] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[24]) + x[44] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[24])) - x[44] + x[45], -dt * (2 * Caf*Lf*x[65] / I + x[35] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[25]) + x[45] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[25])) - x[45] + x[46], -dt * (2 * Caf*Lf*x[66] / I + x[36] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[26]) + x[46] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[26])) - x[46] + x[47], -dt * (2 * Caf*Lf*x[67] / I + x[37] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[27]) + x[47] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[27])) - x[47] + x[48], -dt * (2 * Caf*Lf*x[68] / I + x[38] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[28]) + x[48] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[28])) - x[48] + x[49], -argp + x[50], -dt * x[40] - x[50] + x[51], -dt * x[41] - x[51] + x[52], -dt * x[42] - x[52] + x[53], -dt * x[43] - x[53] + x[54], -dt * x[44] - x[54] + x[55], -dt * x[45] - x[55] + x[56], -dt * x[46] - x[56] + x[57], -dt * x[47] - x[57] + x[58], -dt * x[48] - x[58] + x[59];
		}

		void gf(VectorXd &value, VectorXd const &x)
		{
			value.resize(m_m);

			double s_max = settings.steer_max;
			double s_min = settings.steer_min;

			double a_max = settings.a_max;
			double a_min = settings.a_min;

			value << s_max - x[60], s_max - x[61], s_max - x[62], s_max - x[63], s_max - x[64], s_max - x[65], s_max - x[66], s_max - x[67], s_max - x[68], -s_min + x[60], -s_min + x[61], -s_min + x[62], -s_min + x[63], -s_min + x[64], -s_min + x[65], -s_min + x[66], -s_min + x[67], -s_min + x[68], a_max - x[69], a_max - x[70], a_max - x[71], a_max - x[72], a_max - x[73], a_max - x[74], a_max - x[75], a_max - x[76], a_max - x[77], -a_min + x[69], -a_min + x[70], -a_min + x[71], -a_min + x[72], -a_min + x[73], -a_min + x[74], -a_min + x[75], -a_min + x[76], -a_min + x[77];
		}

		void dhf(MatrixXd &grad, VectorXd &x)
		{
			grad.resize(m_n, m_l);

			double p0 = args.coeffs[0];
			double p1 = args.coeffs[1];
			double p2 = args.coeffs[2];
			double p3 = args.coeffs[3];

			double ref_v = args.ref_v;

			double w_cte = settings.w_cte;
			double w_v = settings.w_v;
			double w_s = settings.w_s;
			double w_a = settings.w_a;
			double w_sd = settings.w_sd;
			double w_ad = settings.w_ad;
			double w_ep = settings.w_epsi;

			double dt = settings.dt;
			double Lf = settings.Lf;
			double Lr = settings.Lr;
			double Caf = settings.Caf;
			double Car = settings.Car;
			double m = settings.Mass;
			double I = settings.I;

			grad << 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, -dt * cos(x[50]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * sin(x[50]), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (x[40] * (-1 - (-2 * Caf*Lf + 2 * Car*Lr) / (m*pow(x[20], 2))) - x[30] * (-2 * Caf - 2 * Car) / (m*pow(x[20], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[30] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*pow(x[20], 2)) - x[40] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*pow(x[20], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, -dt * cos(x[51]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * sin(x[51]), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (x[41] * (-1 - (-2 * Caf*Lf + 2 * Car*Lr) / (m*pow(x[21], 2))) - x[31] * (-2 * Caf - 2 * Car) / (m*pow(x[21], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[31] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*pow(x[21], 2)) - x[41] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*pow(x[21], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, -dt * cos(x[52]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * sin(x[52]), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (x[42] * (-1 - (-2 * Caf*Lf + 2 * Car*Lr) / (m*pow(x[22], 2))) - x[32] * (-2 * Caf - 2 * Car) / (m*pow(x[22], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[32] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*pow(x[22], 2)) - x[42] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*pow(x[22], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, -dt * cos(x[53]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * sin(x[53]), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (x[43] * (-1 - (-2 * Caf*Lf + 2 * Car*Lr) / (m*pow(x[23], 2))) - x[33] * (-2 * Caf - 2 * Car) / (m*pow(x[23], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[33] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*pow(x[23], 2)) - x[43] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*pow(x[23], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, -dt * cos(x[54]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * sin(x[54]), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (x[44] * (-1 - (-2 * Caf*Lf + 2 * Car*Lr) / (m*pow(x[24], 2))) - x[34] * (-2 * Caf - 2 * Car) / (m*pow(x[24], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[34] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*pow(x[24], 2)) - x[44] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*pow(x[24], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, -dt * cos(x[55]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * sin(x[55]), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (x[45] * (-1 - (-2 * Caf*Lf + 2 * Car*Lr) / (m*pow(x[25], 2))) - x[35] * (-2 * Caf - 2 * Car) / (m*pow(x[25], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[35] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*pow(x[25], 2)) - x[45] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*pow(x[25], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, -dt * cos(x[56]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * sin(x[56]), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (x[46] * (-1 - (-2 * Caf*Lf + 2 * Car*Lr) / (m*pow(x[26], 2))) - x[36] * (-2 * Caf - 2 * Car) / (m*pow(x[26], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[36] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*pow(x[26], 2)) - x[46] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*pow(x[26], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, -dt * cos(x[57]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * sin(x[57]), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (x[47] * (-1 - (-2 * Caf*Lf + 2 * Car*Lr) / (m*pow(x[27], 2))) - x[37] * (-2 * Caf - 2 * Car) / (m*pow(x[27], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[37] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*pow(x[27], 2)) - x[47] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*pow(x[27], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * cos(x[58]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * sin(x[58]), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (x[48] * (-1 - (-2 * Caf*Lf + 2 * Car*Lr) / (m*pow(x[28], 2))) - x[38] * (-2 * Caf - 2 * Car) / (m*pow(x[28], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[38] * (-2 * Caf*Lf + 2 * Car*Lr) / (I*pow(x[28], 2)) - x[48] * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*pow(x[28], 2))), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, dt*sin(x[50]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * cos(x[50]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -dt * (-2 * Caf - 2 * Car) / (m*x[20]) - 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[20]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, dt*sin(x[51]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * cos(x[51]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -dt * (-2 * Caf - 2 * Car) / (m*x[21]) - 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[21]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, dt*sin(x[52]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * cos(x[52]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -dt * (-2 * Caf - 2 * Car) / (m*x[22]) - 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[22]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, dt*sin(x[53]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * cos(x[53]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -dt * (-2 * Caf - 2 * Car) / (m*x[23]) - 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[23]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, dt*sin(x[54]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * cos(x[54]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -dt * (-2 * Caf - 2 * Car) / (m*x[24]) - 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[24]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, dt*sin(x[55]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * cos(x[55]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -dt * (-2 * Caf - 2 * Car) / (m*x[25]) - 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[25]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, dt*sin(x[56]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * cos(x[56]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -dt * (-2 * Caf - 2 * Car) / (m*x[26]) - 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[26]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, dt*sin(x[57]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * cos(x[57]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -dt * (-2 * Caf - 2 * Car) / (m*x[27]) - 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[27]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, dt*sin(x[58]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * cos(x[58]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -dt * (-2 * Caf - 2 * Car) / (m*x[28]) - 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-2 * Caf*Lf + 2 * Car*Lr) / (I*x[28]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[20] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[20])), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1 - dt * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[20]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[21] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[21])), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1 - dt * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[21]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[22] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[22])), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1 - dt * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[22]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[23] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[23])), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1 - dt * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[23]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[24] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[24])), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1 - dt * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[24]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[25] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[25])), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1 - dt * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[25]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[26] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[26])), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1 - dt * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[26]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[27] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[27])), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1 - dt * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[27]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * (-x[28] + (-2 * Caf*Lf + 2 * Car*Lr) / (m*x[28])), 0, 0, 0, 0, 0, 0, 0, 0, 1, -1 - dt * (-2 * Caf*pow(Lf, 2) - 2 * Car*pow(Lr, 2)) / (I*x[28]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, dt*x[20] * sin(x[50]) + dt * x[30] * cos(x[50]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * x[20] * cos(x[50]) + dt * x[30] * sin(x[50]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, dt*x[21] * sin(x[51]) + dt * x[31] * cos(x[51]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * x[21] * cos(x[51]) + dt * x[31] * sin(x[51]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, dt*x[22] * sin(x[52]) + dt * x[32] * cos(x[52]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * x[22] * cos(x[52]) + dt * x[32] * sin(x[52]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, dt*x[23] * sin(x[53]) + dt * x[33] * cos(x[53]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * x[23] * cos(x[53]) + dt * x[33] * sin(x[53]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, dt*x[24] * sin(x[54]) + dt * x[34] * cos(x[54]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * x[24] * cos(x[54]) + dt * x[34] * sin(x[54]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, dt*x[25] * sin(x[55]) + dt * x[35] * cos(x[55]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * x[25] * cos(x[55]) + dt * x[35] * sin(x[55]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, dt*x[26] * sin(x[56]) + dt * x[36] * cos(x[56]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * x[26] * cos(x[56]) + dt * x[36] * sin(x[56]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, dt*x[27] * sin(x[57]) + dt * x[37] * cos(x[57]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * x[27] * cos(x[57]) + dt * x[37] * sin(x[57]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, dt*x[28] * sin(x[58]) + dt * x[38] * cos(x[58]), 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt * x[28] * cos(x[58]) + dt * x[38] * sin(x[58]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*dt / m, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*Lf*dt / I, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*dt / m, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*Lf*dt / I, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*dt / m, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*Lf*dt / I, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*dt / m, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*Lf*dt / I, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*dt / m, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*Lf*dt / I, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*dt / m, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*Lf*dt / I, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*dt / m, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*Lf*dt / I, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*dt / m, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*Lf*dt / I, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*dt / m, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * Caf*Lf*dt / I, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -dt, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;

		}

		void dgf(MatrixXd &grad, VectorXd &x)
		{
			grad.resize(m_n, m_m);

			grad << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1;
		}

		double mpsi(VectorXd const &x, VectorXd &mu, VectorXd &lambda, double sigma)
		{
			double f = cost(x);
			VectorXd he, gi;
			hf(he, x);
			gf(gi, x);

			size_t l = he.size();
			size_t m = gi.size();
			double s1 = 0.;
			double psi = f;

			for (size_t i = 0; i < l; i++)
			{
				psi = psi - he[i] * mu[i];
				s1 = s1 + he[i] * he[i];
			}
			psi += 0.5 * sigma * s1;
			double s2 = 0., s3 = 0.;
			for (size_t i = 0; i < m; i++)
			{
				s3 = std::max(0., lambda[i] - sigma * gi[i]);
				s2 += s3 * s3 - lambda[i] * lambda[i];
			}
			psi += s2 / (2. * sigma);
			return psi;
		}

		void dmpsi(VectorXd &dpsi, VectorXd &x, VectorXd &mu, VectorXd &lambda, double sigma)
		{
			grad(dpsi, x);
			VectorXd he, gi;
			MatrixXd dhe, dgi;
			hf(he, x);
			gf(gi, x);
			dhf(dhe, x);
			dgf(dgi, x);

			size_t l = he.size();
			size_t m = gi.size();
			for (size_t i = 0;i < l;++i)
			{
				dpsi = dpsi + (sigma * he[i] - mu[i]) * dhe.col(i);
			}

			for (size_t i = 0;i < m;++i)
			{
				if (lambda[i]-sigma*gi[i]>0)
				{
					dpsi = dpsi + (sigma * gi[i] - lambda[i]) * dgi.col(i);
				}
			}
		}
	};
}


int main()
{
	SISS::LDM ldm;
	int iters = 1;
	double cost;
	auto begin = std::chrono::steady_clock::now();

	for (size_t i = 0; i < iters; i++)
	{
		for (int j = 0;j < ldm.settings.N; j++)
		{
			ldm.m_x[2*ldm.settings.N+j] = 10.0;
		}
		cout << "x = " << ldm.m_x.transpose() << endl;
		cost = multphr<SISS::LDM>(std::make_shared<SISS::LDM>(ldm), ldm.m_x);
	}
	auto end = std::chrono::steady_clock::now();

	std::cout << "Average Time difference = "
		<< std::chrono::duration_cast<std::chrono::microseconds>(end -
			begin)
		.count() /
		1000. / (float)iters
		<< "ms \n";

	cout << "cost = " << cost << endl;
	cout << "x = " << ldm.m_x.transpose() << endl;
	std::getchar();

	return 0;
}